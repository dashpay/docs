# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Dash Core Group, Inc
# This file is distributed under the same license as the Dash package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# jmp2esp <xsrf@icloud.com>, 2022
# Alex.ys <silvershark.ys@gmail.com>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Dash latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-23 15:49-0400\n"
"PO-Revision-Date: 2022-12-27 18:55+0000\n"
"Last-Translator: Alex.ys <silvershark.ys@gmail.com>, 2022\n"
"Language-Team: Chinese (China) (https://app.transifex.com/dash/teams/37570/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../docs/user/developers/compiling.rst-1
msgid ""
"Compile Dash Core for Linux, macOS, Windows and Gitian deterministic builds"
msgstr "编译Dash Core，实现Linux、macOS、Windows及Gitian确定性构建"

#: ../../docs/user/developers/compiling.rst-1
msgid ""
"dash, build, compile, linux, macOS, windows, binary, Gitian, developers"
msgstr ""

#: ../../docs/user/developers/compiling.rst:9
msgid "Compiling Dash Core"
msgstr "编译Dash Core"

#: ../../docs/user/developers/compiling.rst:11
msgid ""
"While Dash offers stable binary builds on the `website "
"<https://www.dash.org/downloads/>`_ and on `GitHub "
"<https://github.com/dashpay/dash/releases>`__, and development builds using "
"`GitLab CI <https://gitlab.com/dashpay/dash/pipelines>`_,  many users will "
"also be interested in building Dash binaries for themselves. This process "
"has been greatly simplified with the release of Dash Core 0.13.0, and users "
"who do not required deterministic builds can typically follow the `generic "
"build notes <https://github.com/dashpay/dash/blob/develop/doc/build-"
"generic.md>`__ available on GitHub to compile or cross-compile Dash for any "
"platform."
msgstr ""

#: ../../docs/user/developers/compiling.rst:21
msgid ""
"The instructions to build Dash Core 0.12.3 or older are available `here "
"<https://docs.dash.org/en/0.12.3/developers/compiling.html>`__ on a previous"
" version of this page."
msgstr ""
"Dash Core 0.12.3 或者更早的安装指导可在 `here "
"<https://docs.dash.org/en/0.12.3/developers/compiling.html>`__ 当前页面的更早版本上找到。"

#: ../../docs/user/developers/compiling.rst:28
msgid "Gitian"
msgstr "Gitian"

#: ../../docs/user/developers/compiling.rst:30
msgid ""
"Gitian is the deterministic build process that is used to build the Dash "
"Core executables. It provides a way to be reasonably sure that the "
"executables are really built from the source on GitHub. It also makes sure "
"that the same, tested dependencies are used and statically built into the "
"executable. Multiple developers build the source code by following a "
"specific descriptor (\"recipe\"), cryptographically sign the result, and "
"upload the resulting signature. These results are compared and only if they "
"match, the build is accepted and uploaded to dash.org."
msgstr ""
"Gitian属于确定性构建过程，用于构建Dash "
"Core的可执行文件。Gitian提供有一种方法，可合理地确认可执行文件真实构建自GitHub上的源文件。Gitian还可确保将相同的、经过测试的依赖项应用于可执行文件，并将其静态构建到可执行文件中。多名开发者依照特定的描述符（\"recipe\"）来构建源代码，加密签署结果，并将生成的签名上传。对这些结果进行比较，如果相匹配，则接受构建并上传至dash.org。"

#: ../../docs/user/developers/compiling.rst:40
msgid "Build process"
msgstr ""

#: ../../docs/user/developers/compiling.rst:43
msgid ""
"This setup has been tested using a clean install of Ubuntu 20.04. For "
"maximum compatibility, please use that version."
msgstr ""

#: ../../docs/user/developers/compiling.rst:46
msgid ""
"Start by logging in as the \"root\" user. Create a new user with the "
"following command, replacing ``<username>`` with a username of your choice::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:51
msgid ""
"You will be prompted for a password. Enter and confirm using a new password "
"(different to your root password) and store it in a safe place. You will "
"also see prompts for user information, but this can be left blank. "
"Alternatively, an existing user can be used on systems that are already in "
"use (e.g. your existing development system)."
msgstr ""

#: ../../docs/user/developers/compiling.rst:57
msgid ""
"Create a ``docker`` group on the system. This group will be used by Docker "
"processes and also will enable non-root users to run the Docker commands "
"used by the build process::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:63
msgid ""
"Add the user to the sudo and docker groups so they can perform commands as "
"root and run docker commands::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:69
msgid "Install prerequisites"
msgstr ""

#: ../../docs/user/developers/compiling.rst:71
msgid ""
"While still logged in as root, update the system from the Ubuntu package "
"repository::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:77
msgid "Install apt-cacher-ng::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:82
msgid ""
"Select ``No`` when asked ``Allow HTTP tunnels through Apt-Cacher NG?`` "
"during installation."
msgstr ""

#: ../../docs/user/developers/compiling.rst:85
msgid ""
"Note: you may also need to open port 3142 if you have a firewall enabled on "
"your system (e.g. ``ufw allow 3142/tcp``)."
msgstr ""

#: ../../docs/user/developers/compiling.rst:88
msgid ""
"After installing these updates, reboot the system, login as ``<username>``, "
"and clone required repositories::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:96
msgid "Download the Mac OSX SDK::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:102
msgid "Prepare gitian"
msgstr ""

#: ../../docs/user/developers/compiling.rst:104
msgid ""
"It is only necessary to run this step during the initial setup of your "
"machine. Checkout the tag associated with the Dash Core version you plan to "
"build::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:113
msgid "Run the gitian-build setup routine to prepare your environment::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:121
msgid ""
"The ``signer`` parameter should be set to the value provided for \"Real "
"name\" when generating a key with GPG. See the `GnuPrivacyGuard Howto "
"<https://help.ubuntu.com/community/GnuPrivacyGuardHowto#Generating_an_OpenPGP_Key>`_"
" for details on how to generate a key if you don't already have one."
msgstr ""

#: ../../docs/user/developers/compiling.rst:127
msgid "Build Dash Core"
msgstr ""

#: ../../docs/user/developers/compiling.rst:129
msgid "Run gitian build to create binaries for Linux, Mac, and Windows::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:138
msgid ""
"These instructions assume that a PGP key for <signer> exists on the build "
"system. If the expected key is not found, the script will fail at the "
"signing step with a message including::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:145
msgid ""
"When the build completes, it will put the binaries in a ``dashcore-"
"binaries`` folder. The ``.assert`` files and their signatures will be placed"
" in ``gitian.sigs/<version>/<signer>/...``."
msgstr ""

#: ../../docs/user/developers/compiling.rst:150
msgid "Create signatures for signed binaries"
msgstr ""

#: ../../docs/user/developers/compiling.rst:152
msgid ""
"Mac and Windows binaries are signed by Dash Core Group using the relevant "
"Apple/Microsoft processes. In this step, that information will be validated "
"and signed by your machine. The associated ``.assert`` files and their "
"signatures will be placed in ``gitian.sigs/<version>/<signer>/...`` along "
"with the signatures for unsigned binaries created in the previous step."
msgstr ""

#: ../../docs/user/developers/compiling.rst:166
msgid "Verify signatures"
msgstr ""

#: ../../docs/user/developers/compiling.rst:168
msgid ""
"The `gitian.sigs repository <https://github.com/dashpay/gitian.sigs/>`_ "
"contains deterministic build results signed by multiple Core developers for "
"each release. Run the following command to verify that your build matches "
"the official release::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:176
msgid ""
"You should get a result similar to the following for Linux, Windows, MacOS, "
"Signed Windows, and Signed MacOS. Assuming the previous steps completed "
"successfully, you will also see your own signatures with an ``OK`` status "
"also."
msgstr ""

#: ../../docs/user/developers/compiling.rst:212
msgid "Upload signatures"
msgstr ""

#: ../../docs/user/developers/compiling.rst:214
msgid ""
"After successfully building the binaries, signing them, and verifying the "
"signatures, you can optionally contribute them to the `gitian.sigs "
"repository <https://github.com/dashpay/gitian.sigs/>`_ via a pull request on"
" GitHub."
msgstr ""

#: ../../docs/user/developers/compiling.rst:219
msgid "Initial setup"
msgstr ""

#: ../../docs/user/developers/compiling.rst:221
msgid ""
"Since the official gitian.sigs repository has restricted write access, "
"create a fork of it via GitHub and add your fork as a remote repository::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:226
msgid ""
"The first time you contribute signatures, also put a copy of your public key"
" in the ``gitian-keys`` folder of the repository so others can easily verify"
" your signature. Your public key can be exported to a file using the "
"following command::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:236
msgid "Adding your signatures"
msgstr ""

#: ../../docs/user/developers/compiling.rst:238
msgid "Create a new branch for the version that was built::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:243
msgid ""
"Add and commit the ``*.assert`` and ``*.assert.sig`` files created by the "
"build process. They will be located in the following folders::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:252
msgid "Push to your fork of the gitian.sigs repository on GitHub::"
msgstr ""

#: ../../docs/user/developers/compiling.rst:257
msgid ""
"Go to `GitHub <https://github.com/dashpay/gitian.sigs/pulls>`__ and open a "
"pull request to the ``master`` branch of the upstream repository. The pull "
"request will be reviewed by Dash Core developers and merged if everything "
"checks out. Thanks for contributing!"
msgstr ""
