# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Dash Core Group, Inc
# This file is distributed under the same license as the Dash package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Dash latest\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-29 09:56-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../docs/user/developers/integration.rst:-1
msgid "Technical guides for developers integrating Dash."
msgstr ""

#: ../../docs/user/developers/integration.rst:-1
msgid ""
"dash, merchants, API, SDK, instantsend, python, .NET, java, javascript, "
"nodejs, php, objective-c"
msgstr ""

#: ../../docs/user/developers/integration.rst:9
msgid "Integration Overview"
msgstr ""

#: ../../docs/user/developers/integration.rst:11
msgid ""
"This documentation is also available as a `PDF "
"<https://github.com/dashpay/docs/raw/master/binary/integration/Dash_IntegrationOverview.pdf>`__."
msgstr ""

#: ../../docs/user/developers/integration.rst:13
msgid ""
"`Dash Core <https://github.com/dashpay/dash/releases>`__ is a fork of "
"`Bitcoin Core <https://github.com/bitcoin/bitcoin>`__ and shares many "
"common functionalities. Key differences are found in existing JSON-RPC "
"commands which have been customized to support unique functionalities "
"such as InstantSend."
msgstr ""

#: ../../docs/user/developers/integration.rst:19
msgid "The Basics"
msgstr ""

#: ../../docs/user/developers/integration.rst:21
msgid ""
"Dash is a Proof of Work network, and similar to Bitcoin, Dash has a "
"mining network but uses a different block hashing algorithm. Dash serves "
"as an improvement of Bitcoin's shortcomings by offering a robust solution"
" for instant transactions, enhancing user privacy, and offering a self-"
"sustainable decentralized governance model."
msgstr ""

#: ../../docs/user/developers/integration.rst:27
msgid ""
"Notably, Dash InstantSend provides a mechanism for zero-confirmation "
"transactions to be safely accepted and re-spent. InstantSend also "
"provides enhanced security compared to the conventional practice of "
"waiting for multiple block confirmations. Therefore, :ref:`implementing "
"InstantSend <integration-instantsend>` is the recommended best practice "
"for all Dash integrations."
msgstr ""

#: ../../docs/user/developers/integration.rst:34
msgid "Block time: ~2.6 minutes per block"
msgstr ""

#: ../../docs/user/developers/integration.rst:35
msgid "Github source: https://github.com/dashpay/dash"
msgstr ""

#: ../../docs/user/developers/integration.rst:36
msgid "Latest release: https://github.com/dashpay/dash/releases/latest"
msgstr ""

#: ../../docs/user/developers/integration.rst:39
msgid "JSON-RPC Interface"
msgstr ""

#: ../../docs/user/developers/integration.rst:41
msgid ""
"The majority of commands are unchanged from Bitcoin making integration "
"into existing systems relatively straightforward. For a complete listing "
"of RPC commands please refer to the :ref:`​Dash Developer Guide <core"
":guide-index>`."
msgstr ""

#: ../../docs/user/developers/integration.rst:46
msgid ""
"Note that the following commands have been modified to support "
"InstantSend:"
msgstr ""

#: ../../docs/user/developers/integration.rst:48
#: ../../docs/user/developers/integration.rst:194
msgid ":ref:`getrawmempool <core:api-rpc-blockchain-getrawmempool>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:49
#: ../../docs/user/developers/integration.rst:195
msgid ":ref:`getmempoolancestors <core:api-rpc-blockchain-getmempoolancestors>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:50
#: ../../docs/user/developers/integration.rst:196
msgid ""
":ref:`getmempooldescendants <core:api-rpc-blockchain-"
"getmempooldescendants>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:51
#: ../../docs/user/developers/integration.rst:197
msgid ":ref:`getmempoolentry <core:api-rpc-blockchain-getmempoolentry>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:52
#: ../../docs/user/developers/integration.rst:198
#: ../../docs/user/developers/integration.rst:320
msgid ":ref:`getrawtransaction <core:api-rpc-raw-transactions-getrawtransaction>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:53
#: ../../docs/user/developers/integration.rst:199
#: ../../docs/user/developers/integration.rst:321
msgid ":ref:`gettransaction <core:api-rpc-wallet-gettransaction>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:54
#: ../../docs/user/developers/integration.rst:200
#: ../../docs/user/developers/integration.rst:322
msgid ":ref:`listtransactions <core:api-rpc-wallet-listtransactions>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:55
#: ../../docs/user/developers/integration.rst:201
#: ../../docs/user/developers/integration.rst:323
msgid ":ref:`listsinceblock <core:api-rpc-wallet-listsinceblock>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:58
#: ../../docs/user/developers/integration.rst:79
msgid "Special Transactions"
msgstr ""

#: ../../docs/user/developers/integration.rst:60
msgid ""
"Dash Core v0.13.0 introduced the concept of “Special Transactions” as "
"specified in `DIP002 "
"<https://github.com/dashpay/dips/blob/master/dip-0002.md>`__. Special "
"Transactions provide a more native way to implement additional features "
"which do not fit into the original concept of transactions. Please see "
"the :ref:`Special Transactions <integration-special-transactions>` "
"section below for more information."
msgstr ""

#: ../../docs/user/developers/integration.rst:68
msgid "Block Hashing Algorithm"
msgstr ""

#: ../../docs/user/developers/integration.rst:70
msgid ""
"Dash uses the X11 algorithm in place of SHA256 used in Bitcoin. It’s "
"important to note, however, that this only affects the hashing of the "
"block itself. All other internals utilize SHA256 hashes (transactions, "
"merkle root, etc.), which allows for most existing libraries to work in "
"the Dash ecosystem."
msgstr ""

#: ../../docs/user/developers/integration.rst:81
msgid ""
"This documentation is also available as a `PDF "
"<https://github.com/dashpay/docs/raw/master/binary/integration"
"/Integration-Resources-Transaction-Types.pdf>`__."
msgstr ""

#: ../../docs/user/developers/integration.rst:83
msgid ""
"Dash 0.13.0 and higher implement `DIP002 Special Transactions "
"<https://github.com/dashpay/dips/blob/master/dip-0002.md>`__, which form "
"a basis for new transaction types that provide on-chain metadata to "
"assist various consensus mechanisms. The following special transaction "
"types exist:"
msgstr ""

#: ../../docs/user/developers/integration.rst:89
msgid "Version"
msgstr ""

#: ../../docs/user/developers/integration.rst:89
msgid "Type"
msgstr ""

#: ../../docs/user/developers/integration.rst:89
msgid "Payload Size"
msgstr ""

#: ../../docs/user/developers/integration.rst:89
msgid "Transaction Purpose / Example"
msgstr ""

#: ../../docs/user/developers/integration.rst:91
#: ../../docs/user/developers/integration.rst:93
#: ../../docs/user/developers/integration.rst:95
#: ../../docs/user/developers/integration.rst:97
#: ../../docs/user/developers/integration.rst:99
#: ../../docs/user/developers/integration.rst:101
#: ../../docs/user/developers/integration.rst:103
msgid "3"
msgstr ""

#: ../../docs/user/developers/integration.rst:91
msgid "0"
msgstr ""

#: ../../docs/user/developers/integration.rst:91
msgid "n/a"
msgstr ""

#: ../../docs/user/developers/integration.rst:91
msgid "Standard Transaction"
msgstr ""

#: ../../docs/user/developers/integration.rst:93
msgid "1"
msgstr ""

#: ../../docs/user/developers/integration.rst:93
#: ../../docs/user/developers/integration.rst:95
#: ../../docs/user/developers/integration.rst:97
#: ../../docs/user/developers/integration.rst:99
#: ../../docs/user/developers/integration.rst:101
#: ../../docs/user/developers/integration.rst:103
msgid "variable"
msgstr ""

#: ../../docs/user/developers/integration.rst:93
msgid ":ref:`Masternode Registration <core:ref-txs-proregtx>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:95
msgid "2"
msgstr ""

#: ../../docs/user/developers/integration.rst:95
msgid ":ref:`Update Masternode Service <core:ref-txs-proupservtx>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:97
msgid ":ref:`Update Masternode Operator <core:ref-txs-proupregtx>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:99
msgid "4"
msgstr ""

#: ../../docs/user/developers/integration.rst:99
msgid ":ref:`Masternode Revocation <core:ref-txs-prouprevtx>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:101
msgid "5"
msgstr ""

#: ../../docs/user/developers/integration.rst:101
msgid ":ref:`Masternode List Merkle Proof <core:ref-txs-cbtx>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:103
msgid "6"
msgstr ""

#: ../../docs/user/developers/integration.rst:103
msgid ":ref:`Quorum Commitment <core:ref-txs-qctx>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:106
msgid "Integration notes:"
msgstr ""

#: ../../docs/user/developers/integration.rst:108
msgid ""
"`DIP002 Special Transactions "
"<https://github.com/dashpay/dips/blob/master/dip-0002.md>`__ introduced a"
" new Transaction Version and related “Payload” to the network."
msgstr ""

#: ../../docs/user/developers/integration.rst:111
msgid ""
"Integrated Systems must be able to `serialize and deserialize "
"<https://github.com/dashpay/dips/blob/master/dip-0002.md#serialization-"
"hashing-and-signing>`__ these new Transaction Types to accurately encode "
"and decode Raw Transaction data."
msgstr ""

#: ../../docs/user/developers/integration.rst:115
msgid ""
"From a `backwards compatibility "
"<https://github.com/dashpay/dips/blob/master/dip-0002.md#compatibility>`__"
" perspective, the 4 byte (32-bit) ``version`` field included in Classical"
" Transactions was split into two fields: ``version`` and ``type`` (each "
"consisting of 2 bytes)."
msgstr ""

#: ../../docs/user/developers/integration.rst:120
msgid ""
"Refer to the :ref:`Special Transactions <core:ref-txs-special-txs>` "
"section of the Dash developer reference for additional detail on these "
"data types, e.g. <variable int>."
msgstr ""

#: ../../docs/user/developers/integration.rst:124
msgid ""
":ref:`InstantSend <integration-instantsend>` status and Payload JSON "
"(e.g. ``proRegTx``) is included in the JSON-RPC response, please note "
"that this data is not part of the calculated hash and is provided for "
"convenience."
msgstr ""

#: ../../docs/user/developers/integration.rst:129
msgid ""
"See the `transaction types integration documentation (PDF) "
"<https://github.com/dashpay/docs/raw/master/binary/integration"
"/Integration-Resources-Transaction-Types.pdf>`__ for worked examples of "
"each transaction type."
msgstr ""

#: ../../docs/user/developers/integration.rst:136
msgid "InstantSend"
msgstr ""

#: ../../docs/user/developers/integration.rst:138
msgid ""
"This documentation is also available as a `PDF "
"<https://github.com/dashpay/docs/raw/master/binary/integration/Dash_v0.14_LLMQ_InstantSend.pdf>`__."
msgstr ""

#: ../../docs/user/developers/integration.rst:140
msgid ""
"InstantSend is a feature provided by the Dash network that allows for "
"zero-confirmation transactions to be safely accepted and re-spent. The "
"network attempts to lock the inputs of every valid transaction when it is"
" broadcast to the network. Every secured transaction is included in a "
"following block in accordance with standard blockchain principles. "
"Transactions are typically locked by InstantSend within 3 seconds of "
"being propagated to the network."
msgstr ""

#: ../../docs/user/developers/integration.rst:148
msgid ""
"InstantSend is enabled by the Masternode Network which comprises several "
"thousand masternode servers. These nodes are differentiated from standard"
" nodes by having proven ownership of 1,000 Dash, making the network "
"`highly resistant to Sybil attacks "
"<https://en.wikipedia.org/wiki/Sybil_attack>`__. Masternodes form `Long-"
"Living Masternode Quorums (LLMQs) "
"<https://github.com/dashpay/dips/blob/master/dip-0006.md>`__, which are "
"responsible for providing near-instant certainty to the transaction "
"participants that the transaction inputs cannot be re-spent, and that the"
" transaction will be included in a following block instead of a "
"conflicting transaction."
msgstr ""

#: ../../docs/user/developers/integration.rst:158
msgid ""
"This concept works as an extension to Nakamoto Consensus to provide "
"additional security. InstantSend enables transacted funds to be "
"immediately and securely re-spent by the recipient, even before the "
"transaction is included in a block."
msgstr ""

#: ../../docs/user/developers/integration.rst:164
msgid "Receiving InstantSend Transactions"
msgstr ""

#: ../../docs/user/developers/integration.rst:168
msgid ""
"An \"InstantSend Transaction\" is simply a standard transaction that has "
"been provided additional assurances by the masternode network. As a "
"result, and from an integration perspective, the only technical "
"difference is the InstantSend status."
msgstr ""

#: ../../docs/user/developers/integration.rst:173
msgid "Receiving an InstantSend Transaction introduces two requirements:"
msgstr ""

#: ../../docs/user/developers/integration.rst:175
msgid "The ability to determine the “InstantSend Status” of a given transaction."
msgstr ""

#: ../../docs/user/developers/integration.rst:178
#: ../../docs/user/developers/integration.rst:302
msgid ""
"The ability to adjust “Confirmation Status” independently of block "
"confirmation."
msgstr ""

#: ../../docs/user/developers/integration.rst:181
msgid ""
"InstantSend Status is provided by the dash daemon, typically through a "
"direct connection (e.g. RPC), :ref:`ZMQ notification <core:examples-"
"receiving-zmq-notifications>`, or through the usage of an external wallet"
" notification script."
msgstr ""

#: ../../docs/user/developers/integration.rst:187
#: ../../docs/user/developers/integration.rst:310
msgid "Direct Connection"
msgstr ""

#: ../../docs/user/developers/integration.rst:189
msgid ""
"InstantSend Status can be identified through direct connection with the "
"Dash daemon using JSON-RPC protocol. The ``instantlock`` attribute of the"
" JSON response reflects the status of the transaction and is included in "
"the following commands:"
msgstr ""

#: ../../docs/user/developers/integration.rst:204
#: ../../docs/user/developers/integration.rst:326
msgid "ZMQ Notification"
msgstr ""

#: ../../docs/user/developers/integration.rst:206
msgid ""
"Whenever a transaction enters the mempool and whenever a transaction is "
"locked in the mempool, ZMQ notifications can be broadcast by the node. "
"Refer to `the list of possible ZMQ notifications "
"<https://github.com/dashpay/dash/blob/master/doc/zmq.md#usage>`__ for "
"more details."
msgstr ""

#: ../../docs/user/developers/integration.rst:212
msgid ""
"The following notifications are relevant for recognizing transactions and"
" their corresponding instantlocks:"
msgstr ""

#: ../../docs/user/developers/integration.rst:215
msgid "zmqpubhashtx"
msgstr ""

#: ../../docs/user/developers/integration.rst:216
msgid "zmqpubhashtxlock"
msgstr ""

#: ../../docs/user/developers/integration.rst:217
msgid "zmqpubrawtx"
msgstr ""

#: ../../docs/user/developers/integration.rst:218
msgid "zmqpubrawtxlock"
msgstr ""

#: ../../docs/user/developers/integration.rst:221
#: ../../docs/user/developers/integration.rst:369
msgid "Wallet Notification"
msgstr ""

#: ../../docs/user/developers/integration.rst:223
msgid ""
"The Dash Core Daemon can be configured to execute an external script "
"whenever an InstantSend transaction relating to that wallet is observed. "
"This is configured by adding the following line to the dash.conf file::"
msgstr ""

#: ../../docs/user/developers/integration.rst:229
msgid ""
"This is typically used with a wallet that has been populated with `watch-"
"only "
"<https://docs.dash.org/projects/core/en/stable/docs/resources/glossary.html"
"#watch-only-address>`__ addresses."
msgstr ""

#: ../../docs/user/developers/integration.rst:236
msgid "Broadcasting InstantSend Transactions"
msgstr ""

#: ../../docs/user/developers/integration.rst:240
msgid ""
"Because all transactions on the Dash network are automatically "
"InstantSend, no procedural changes are required to broadcast transactions"
" as InstantSend."
msgstr ""

#: ../../docs/user/developers/integration.rst:243
msgid ""
"Since Dash v0.14.0 established LLMQs on the Dash network, quorums will "
"now attempt to lock every valid transaction by default without any "
"additional fee or action by the sending wallet or user. A transaction is "
"eligible for InstantSend when each of its inputs is considered confirmed."
" This is the case when at least one of the following circumstances is "
"true:"
msgstr ""

#: ../../docs/user/developers/integration.rst:250
msgid ""
"the previous transaction referred to by the input is confirmed with 6 "
"blocks"
msgstr ""

#: ../../docs/user/developers/integration.rst:252
msgid "the previous transaction is confirmed through an older InstantSend lock"
msgstr ""

#: ../../docs/user/developers/integration.rst:254
msgid ""
"the block containing the previous transaction is `ChainLocked "
"<https://github.com/dashpay/dips/blob/master/dip-0008.md>`__"
msgstr ""

#: ../../docs/user/developers/integration.rst:256
msgid ""
"When checking the previous transaction for an InstantSend lock, it is "
"important to do this on mempool (non-mined) transactions. This allows "
"chained InstantSend locking."
msgstr ""

#: ../../docs/user/developers/integration.rst:261
#: ../../docs/user/developers/integration.rst:378
msgid "Additional Resources"
msgstr ""

#: ../../docs/user/developers/integration.rst:263
#: ../../docs/user/developers/integration.rst:380
msgid ""
"The following resources provide additional information about InstantSend "
"and are intended to help provide a more complete understanding of the "
"underlying technologies."
msgstr ""

#: ../../docs/user/developers/integration.rst:267
msgid ""
"`InstantSend Technical Information "
"<https://github.com/dashpay/dash/blob/master/doc/instantsend.md#zmq>`__"
msgstr ""

#: ../../docs/user/developers/integration.rst:268
msgid ""
":ref:`InstantSend Developer Documentation <core:guide-features-"
"instantsend>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:269
#: ../../docs/user/developers/integration.rst:385
msgid ""
":ref:`Receiving ZMQ notifications <core:examples-receiving-zmq-"
"notifications>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:270
msgid ""
"`DIP0010: LLMQ InstantSend "
"<https://github.com/dashpay/dips/blob/master/dip-0010.md>`__"
msgstr ""

#: ../../docs/user/developers/integration.rst:271
#: ../../docs/user/developers/integration.rst:387
msgid ""
"`Product Brief: Dash Core v0.14 Release <https://blog.dash.org/product-"
"brief-dash-core-release-v0-14-0-now-on-testnet-8f5f4ad45c96>`__"
msgstr ""

#: ../../docs/user/developers/integration.rst:276
msgid "ChainLocks"
msgstr ""

#: ../../docs/user/developers/integration.rst:278
msgid ""
"ChainLocks are a feature provided by the Dash Network which provides "
"certainty when accepting payments. This technology, particularly when "
"used in parallel with :ref:`InstantSend <instantsend>`, creates an "
"environment in which payments can be accepted immediately and without the"
" risk of “Blockchain Reorganization Events”."
msgstr ""

#: ../../docs/user/developers/integration.rst:284
msgid ""
"The risk of blockchain reorganization is typically addressed by requiring"
" multiple :term:`confirmations` before a transaction can be safely "
"accepted as payment. This type of indirect security is effective, but at "
"a cost of time and user experience. ChainLocks are a solution for this "
"problem."
msgstr ""

#: ../../docs/user/developers/integration.rst:290
msgid "Receiving ChainLocks"
msgstr ""

#: ../../docs/user/developers/integration.rst:294
msgid ""
"Once a ChainLock is observed for a block, each transaction in that block "
"and all previous blocks can be considered irreversibly and fully "
"confirmed."
msgstr ""

#: ../../docs/user/developers/integration.rst:297
msgid "Receiving a ChainLock introduces two requirements:"
msgstr ""

#: ../../docs/user/developers/integration.rst:299
msgid ""
"The ability to determine the “ChainLock Status” of a given block or "
"transaction."
msgstr ""

#: ../../docs/user/developers/integration.rst:305
msgid ""
"ChainLock status is provided by the dash daemon, typically through a "
"direct connection (e.g. RPC) or by a :ref:`ZMQ notification <core"
":examples-receiving-zmq-notifications>`."
msgstr ""

#: ../../docs/user/developers/integration.rst:312
msgid ""
"ChainLock status can be identified through direct connection with the "
"Dash daemon using JSON-RPC protocol. The boolean ``chainlock`` attribute "
"of the JSON response reflects the ChainLock status of the block or "
"transaction and is included in the following commands:"
msgstr ""

#: ../../docs/user/developers/integration.rst:317
msgid ":ref:`getblock <core:api-rpc-blockchain-getblock>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:318
msgid ":ref:`getblockheader <core:api-rpc-blockchain-getblockheader>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:319
msgid ":ref:`getblockheaders <core:api-rpc-blockchain-getblockheaders>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:328
msgid ""
"ChainLock signatures are created shortly after the related block has been"
" mined. As a result it is recommended that integrated clients use "
":ref:`ZMQ (ZeroMQ) notifications <core:examples-receiving-zmq-"
"notifications>` in order to ensure that this information is received as "
"promptly as possible. Refer to `the list of possible ZMQ notifications "
"<https://github.com/dashpay/dash/blob/master/doc/zmq.md#usage>`__ for "
"more details."
msgstr ""

#: ../../docs/user/developers/integration.rst:336
msgid ""
"The following notifications are relevant for recognizing blocks and their"
" corresponding ChainLocks:"
msgstr ""

#: ../../docs/user/developers/integration.rst:339
msgid "zmqpubhashblock"
msgstr ""

#: ../../docs/user/developers/integration.rst:340
msgid "zmqpubhashchainlock"
msgstr ""

#: ../../docs/user/developers/integration.rst:341
msgid "zmqpubrawblock"
msgstr ""

#: ../../docs/user/developers/integration.rst:342
msgid "zmqpubrawchainlock"
msgstr ""

#: ../../docs/user/developers/integration.rst:343
msgid "zmqpubrawchainlocksig"
msgstr ""

#: ../../docs/user/developers/integration.rst:345
msgid ""
"This sample code uses the `js-dashd-zmq library "
"<https://github.com/dashpay/js-dashd-zmq>`__ to listen for ChainLock ZMQ "
"notifications and return the hash of blocks that receive a ChainLock."
msgstr ""

#: ../../docs/user/developers/integration.rst:349
msgid "Subscribe to ChainLock hash ZMQ notifications"
msgstr ""

#: ../../docs/user/developers/integration.rst:371
msgid ""
"The Dash Core daemon can be configured to execute an external script "
"whenever a ChainLock is received. This is configured by adding the "
"following line to the dash.conf file::"
msgstr ""

#: ../../docs/user/developers/integration.rst:384
msgid ":ref:`ChainLock Developer Documentation <core:guide-features-chainlocks>`"
msgstr ""

#: ../../docs/user/developers/integration.rst:386
msgid ""
"`DIP0008: ChainLocks "
"<https://github.com/dashpay/dips/blob/master/dip-0008.md>`__"
msgstr ""

#~ msgid "Technical guides for merchants using Dash. API and SDK resources."
#~ msgstr ""

#~ msgid ""
#~ "dash, merchants, payment processor, API, "
#~ "SDK, insight, blockcypher, instantsend, "
#~ "python, .NET, java, javascript, nodejs, "
#~ "php, objective-c, vending machines"
#~ msgstr ""

#~ msgid ""
#~ "This documentation is also available as"
#~ " a `PDF "
#~ "<https://github.com/dashpay/docs/raw/master/binary/integration/Dash_v0.13_IntegrationOverview.pdf>`__."
#~ msgstr ""

#~ msgid "Latest release: https://github.com/dashpay/dash/releases"
#~ msgstr ""

#~ msgid ""
#~ "The majority of commands are unchanged"
#~ " from Bitcoin making integration into "
#~ "existing systems relatively straightforward. "
#~ "Note that the following commands have"
#~ " been modified to support InstantSend:"
#~ msgstr ""

#~ msgid ""
#~ "`getrawmempool <https://dashcore.readme.io/docs/core-"
#~ "api-ref-remote-procedure-calls-"
#~ "blockchain#getrawmempool>`__"
#~ msgstr ""

#~ msgid ""
#~ "`getmempoolancestors <https://dashcore.readme.io/docs/core-"
#~ "api-ref-remote-procedure-calls-"
#~ "blockchain#getmempoolancestors>`__"
#~ msgstr ""

#~ msgid ""
#~ "`getmempooldescendants <https://dashcore.readme.io/docs/core-"
#~ "api-ref-remote-procedure-calls-"
#~ "blockchain#getmempooldescendants>`__"
#~ msgstr ""

#~ msgid ""
#~ "`getmempoolentry <https://dashcore.readme.io/docs/core-"
#~ "api-ref-remote-procedure-calls-"
#~ "blockchain#getmempoolentry>`__"
#~ msgstr ""

#~ msgid ""
#~ "`getrawtransaction <https://dashcore.readme.io/docs/core-"
#~ "api-ref-remote-procedure-calls-raw-"
#~ "transactions#getrawtransaction>`__"
#~ msgstr ""

#~ msgid ""
#~ "`gettransaction <https://dashcore.readme.io/docs/core-"
#~ "api-ref-remote-procedure-calls-"
#~ "wallet#gettransaction>`__"
#~ msgstr ""

#~ msgid ""
#~ "`listtransactions <https://dashcore.readme.io/docs/core-"
#~ "api-ref-remote-procedure-calls-"
#~ "wallet#listtransactions>`__"
#~ msgstr ""

#~ msgid ""
#~ "`listsinceblock <https://dashcore.readme.io/docs/core-"
#~ "api-ref-remote-procedure-calls-"
#~ "wallet#listsinceblock>`__"
#~ msgstr ""

#~ msgid ""
#~ "Dash Core v0.13.x introduced the concept"
#~ " of “Special Transactions”. Please see "
#~ "the `Transaction Type Integration Guide "
#~ "<https://github.com/dashpay/docs/raw/master/binary/integration"
#~ "/Integration-Resources-Dash-v0.13.0-Transaction-"
#~ "Types.pdf>`__ for more information."
#~ msgstr ""

#~ msgid ""
#~ "This documentation is also available as"
#~ " a `PDF "
#~ "<https://github.com/dashpay/docs/raw/master/binary/integration"
#~ "/Integration-Resources-Dash-v0.13.0-Transaction-"
#~ "Types.pdf>`__."
#~ msgstr ""

#~ msgid "Release"
#~ msgstr ""

#~ msgid "Payload"
#~ msgstr ""

#~ msgid "Payload JSON"
#~ msgstr ""

#~ msgid "Transaction Purpose"
#~ msgstr ""

#~ msgid "v0.13.0"
#~ msgstr ""

#~ msgid "<variable int>"
#~ msgstr ""

#~ msgid "<hex>"
#~ msgstr ""

#~ msgid "proRegTx"
#~ msgstr ""

#~ msgid ""
#~ "`Masternode Registration <https://dashcore.readme.io/docs"
#~ "/core-ref-transactions-special-transactions"
#~ "#section-pro-reg-tx>`__"
#~ msgstr ""

#~ msgid "proUpServTx"
#~ msgstr ""

#~ msgid ""
#~ "`Update Masternode Service "
#~ "<https://dashcore.readme.io/docs/core-ref-transactions-"
#~ "special-transactions#section-pro-up-serv-"
#~ "tx>`__"
#~ msgstr ""

#~ msgid "proUpRegTx"
#~ msgstr ""

#~ msgid ""
#~ "`Update Masternode Operator "
#~ "<https://dashcore.readme.io/docs/core-ref-transactions-"
#~ "special-transactions#section-pro-up-reg-"
#~ "tx>`__"
#~ msgstr ""

#~ msgid "proUpRevTx"
#~ msgstr ""

#~ msgid ""
#~ "`Masternode Revocation <https://dashcore.readme.io/docs"
#~ "/core-ref-transactions-special-transactions"
#~ "#section-pro-up-rev-tx>`__"
#~ msgstr ""

#~ msgid "cbTx"
#~ msgstr ""

#~ msgid ""
#~ "`Masternode List Merkle Proof "
#~ "<https://dashcore.readme.io/docs/core-ref-transactions-"
#~ "special-transactions#section-cb-tx>`__"
#~ msgstr ""

#~ msgid "qcTx"
#~ msgstr ""

#~ msgid ""
#~ "`Quorum Commitment <https://dashcore.readme.io/docs"
#~ "/core-ref-transactions-special-transactions"
#~ "#section-qc-tx>`__"
#~ msgstr ""

#~ msgid ""
#~ "`DIP002 Special Transactions "
#~ "<https://github.com/dashpay/dips/blob/master/dip-0002.md>`__ are"
#~ " a foundational component of Dash "
#~ "Core v0.13.0 and introduce a new "
#~ "Transaction Version and related “Payload” "
#~ "to the network."
#~ msgstr ""

#~ msgid ""
#~ "From a `backwards compatibility "
#~ "<https://github.com/dashpay/dips/blob/master/dip-0002.md#compatibility>`__"
#~ " perspective, the 4 byte (32-bit) "
#~ "``version`` field included in Legacy "
#~ "Transactions has been split into two "
#~ "fields: ``version`` and ``type`` (each "
#~ "consisting of 2 bytes)."
#~ msgstr ""

#~ msgid ""
#~ "Refer to the `Special Transactions "
#~ "<https://dashcore.readme.io/docs/core-ref-transactions-"
#~ "special-transactions>`__ section of the "
#~ "dash developer reference for additional "
#~ "detail on these data types, e.g. "
#~ "<variable int>."
#~ msgstr ""

#~ msgid ""
#~ "See the `v0.13.0 transaction types "
#~ "integration documentation (PDF) "
#~ "<https://github.com/dashpay/docs/raw/master/binary/integration"
#~ "/Integration-Resources-Dash-v0.13.0-Transaction-"
#~ "Types.pdf>`__ for worked examples of "
#~ "each transaction type."
#~ msgstr ""

#~ msgid ""
#~ "InstantSend is a feature provided by "
#~ "the Dash network that allows for "
#~ "zero-confirmation transactions to be safely"
#~ " accepted and re-spent. The network"
#~ " attempts to lock the inputs of "
#~ "every valid transaction when it is "
#~ "broadcast to the network. Every secured"
#~ " transaction is included in a "
#~ "following block in accordance with "
#~ "standard blockchain principles."
#~ msgstr ""

#~ msgid ""
#~ "InstantSend is enabled by the Masternode"
#~ " Network which comprises approximately "
#~ "5,000 masternode servers. These nodes "
#~ "are differentiated from standard nodes "
#~ "by having proven ownership of 1,000 "
#~ "Dash, making the network `highly "
#~ "resistant to Sybil attacks "
#~ "<https://en.wikipedia.org/wiki/Sybil_attack>`__. Masternodes "
#~ "form `Long-Living Masternode Quorums "
#~ "(LLMQs) "
#~ "<https://github.com/dashpay/dips/blob/master/dip-0006.md>`__, "
#~ "which are responsible for providing "
#~ "near-instant certainty to the transaction"
#~ " participants that the transaction inputs"
#~ " cannot be respent, and that the "
#~ "transaction will be included in a "
#~ "following block instead of a conflicting"
#~ " transaction."
#~ msgstr ""

#~ msgid ""
#~ "This concept works as an extension "
#~ "to Nakamoto Consensus. InstantSend enables "
#~ "transacted funds to be immediately and"
#~ " securely respent by the recipient, "
#~ "even before the transaction is included"
#~ " in a block."
#~ msgstr ""

#~ msgid ""
#~ "**Direct Connection:** InstantSend Status can"
#~ " be identified through direct connection"
#~ " with the Dash daemon using JSON-"
#~ "RPC protocol. The “instantlock” attribute "
#~ "of the JSON response reflects the "
#~ "status of the transaction and is "
#~ "included in the following commands:"
#~ msgstr ""

#~ msgid ""
#~ "**ZMQ Notification:** Whenever a transaction"
#~ " enters the mempool and whenever a"
#~ " transaction is locked in the "
#~ "mempool, ZMQ notifications can be "
#~ "broadcast by the node. A list of"
#~ " possible ZMQ notifications can be "
#~ "found `here "
#~ "<https://github.com/dashpay/dash/blob/master/doc/zmq.md#usage>`__."
#~ msgstr ""

#~ msgid ""
#~ "**Wallet Notification:** The Dash Core "
#~ "Daemon can be configured to execute "
#~ "an external script whenever an "
#~ "InstantSend transaction relating to that "
#~ "wallet is observed. This is configured"
#~ " by adding the following line to "
#~ "the dash.conf file::"
#~ msgstr ""

#~ msgid ""
#~ "This is typically used with a "
#~ "wallet that has been populated with "
#~ "`watch-only <https://dashcore.readme.io/docs/core-"
#~ "additional-resources-glossary#section-watch-"
#~ "only-address>`__ addresses."
#~ msgstr ""

#~ msgid ""
#~ "`InstantSend Developer Documentation "
#~ "<https://dashcore.readme.io/docs/core-guide-dash-"
#~ "features-instantsend>`__"
#~ msgstr ""

#~ msgid "API Services"
#~ msgstr ""

#~ msgid ""
#~ "Several API services exist to facilitate"
#~ " quick and easy integration with the"
#~ " Dash network for services including:"
#~ msgstr ""

#~ msgid "Transaction broadcasting"
#~ msgstr ""

#~ msgid "Exchange rates"
#~ msgstr ""

#~ msgid "Currency conversion"
#~ msgstr ""

#~ msgid "Invoice generation"
#~ msgstr ""

#~ msgid ""
#~ "API Services are typically leveraged to"
#~ " eliminate that requirement of running "
#~ "your own infrastructure to support "
#~ "blockchain interactions. This includes "
#~ "mechanisms such as:"
#~ msgstr ""

#~ msgid "Forming and Broadcasting a Transaction to the network."
#~ msgstr ""

#~ msgid "Address generation using HD Wallets."
#~ msgstr ""

#~ msgid "Payment Processing using WebHooks."
#~ msgstr ""

#~ msgid ""
#~ "There are a variety of options for"
#~ " supporting these methods, with the "
#~ "key differentiator being the pricing "
#~ "model included and supported features. "
#~ "The following list of API Providers "
#~ "attempts to outline these key "
#~ "features/differentiators and also includes a"
#~ " link to related documentation."
#~ msgstr ""

#~ msgid "Insight"
#~ msgstr ""

#~ msgid "https://github.com/dashevo/insight-api"
#~ msgstr ""

#~ msgid ""
#~ "The open-source Insight REST API "
#~ "provides you with a convenient, powerful"
#~ " and simple way to read data "
#~ "from the Dash network and build "
#~ "your own services with it. A "
#~ "practical guide to getting started with"
#~ " the Insight API and Insight UI "
#~ "block explorer is available :ref:`here "
#~ "<insight-api>`."
#~ msgstr ""

#~ msgid "Features: Transaction Broadcast, WebSocket Notifications."
#~ msgstr ""

#~ msgid "Pricing Model: Free / Open Source"
#~ msgstr ""

#~ msgid "Documentation: https://github.com/dashevo/insight-api"
#~ msgstr ""

#~ msgid "BlockCypher"
#~ msgstr ""

#~ msgid "https://www.blockcypher.com"
#~ msgstr ""

#~ msgid ""
#~ "BlockCypher is a simple, mostly RESTful"
#~ " JSON API for interacting with "
#~ "blockchains, accessed over HTTP or HTTPS"
#~ " from the api.blockcypher.com domain."
#~ msgstr ""

#~ msgid ""
#~ "Features: Transaction Broadcast, HD Wallet "
#~ "/ Address Generation, WebSocket and "
#~ "WebHook Callbacks as well as Payment "
#~ "Forwarding. BlockCypher does not handle "
#~ "Private Keys."
#~ msgstr ""

#~ msgid ""
#~ "Pricing Model: Per API Call, 5000 "
#~ "Requests -> $85.00 per month "
#~ "(https://accounts.blockcypher.com)"
#~ msgstr ""

#~ msgid "Documentation: https://www.blockcypher.com/dev/dash/"
#~ msgstr ""

#~ msgid "BitGo"
#~ msgstr ""

#~ msgid "https://www.bitgo.com"
#~ msgstr ""

#~ msgid ""
#~ "BitGo provides a simple and robust "
#~ "RESTful API and client SDK to "
#~ "integrate digital currency wallets with "
#~ "your application. Support for Dash "
#~ "InstantSend is available."
#~ msgstr ""

#~ msgid ""
#~ "Features: Multi-Signature HD Wallets, "
#~ "Wallet Operations, WebSocket and WebHook "
#~ "Notifications, Custody Solutions"
#~ msgstr ""

#~ msgid "Pricing Model: Per API Call"
#~ msgstr ""

#~ msgid "Documentation: https://app.bitgo.com/docs/"
#~ msgstr ""

#~ msgid "ChainRider"
#~ msgstr ""

#~ msgid "https://www.chainrider.io"
#~ msgstr ""

#~ msgid ""
#~ "ChainRider is a cloud service providing"
#~ " a set of REST APIs for digital"
#~ " currency management and exploration."
#~ msgstr ""

#~ msgid ""
#~ "Features: Blockchain queries, Event "
#~ "Notifications, Transaction Broadcast, Payment "
#~ "Processing, etc."
#~ msgstr ""

#~ msgid "Pricing Model: Free trial, pay per API call"
#~ msgstr ""

#~ msgid "Documentation: https://www.chainrider.io/docs/dash/"
#~ msgstr ""

#~ msgid "Blockmove"
#~ msgstr ""

#~ msgid "https://blockmove.io"
#~ msgstr ""

#~ msgid ""
#~ "Сryptocurrency wallet, merchant & API "
#~ "provider. Blockmove is a simple and "
#~ "easy way to start accepting payments "
#~ "in cryptocurrency."
#~ msgstr ""

#~ msgid ""
#~ "Features: Non-custodial wallet, HD "
#~ "Wallet, High anonymity, Low fees. "
#~ "Private keys are not stored and "
#~ "are available only to the user."
#~ msgstr ""

#~ msgid ""
#~ "Pricing Model: API - 0.3% for "
#~ "withdrawal transactions. Merchant - 1 "
#~ "year free, then $49/month"
#~ msgstr ""

#~ msgid "Documentation: https://docs.blockmove.io"
#~ msgstr ""

#~ msgid "NOWNodes"
#~ msgstr ""

#~ msgid "https://nownodes.io/"
#~ msgstr ""

#~ msgid ""
#~ "NOWNodes provides simple, fast, and "
#~ "secure RPC access to Dash-based "
#~ "full nodes. The low latency and "
#~ "high performance is of great use "
#~ "to researchers and businesses such as"
#~ " crypto miners or hardware wallet "
#~ "providers."
#~ msgstr ""

#~ msgid "Features: All Dash RPC commands"
#~ msgstr ""

#~ msgid "Pricing Model: Free up to 20k requests, Pricing tiers"
#~ msgstr ""

#~ msgid "Documentation: https://nownodes.io/documentation"
#~ msgstr ""

#~ msgid "CoinPayments"
#~ msgstr ""

#~ msgid "https://www.coinpayments.net"
#~ msgstr ""

#~ msgid ""
#~ "CoinPayments is an integrated payment "
#~ "gateway for cryptocurrencies such as "
#~ "Dash. Shopping cart plugins are "
#~ "available for all popular webcarts used"
#~ " today. CoinPayments can help you set"
#~ " up a new checkout or integrate "
#~ "with your pre-existing checkout."
#~ msgstr ""

#~ msgid ""
#~ "Features: Invoicing, Exchange Rates, WebHook"
#~ " Callbacks. CoinPayments holds Private Keys"
#~ " on their server allowing merchants "
#~ "to withdraw funds in Cryptocurrency or"
#~ " convert to fiat."
#~ msgstr ""

#~ msgid ""
#~ "Integrations: aMember Pro, Arastta, Blesta,"
#~ " BoxBilling, Drupal, Ecwid, Hikashop, "
#~ "Magento, OpenCart, OSCommerce, PrestaShop, "
#~ "Tomato Cart, WooCommerce, Ubercart, XCart, "
#~ "ZenCart"
#~ msgstr ""

#~ msgid ""
#~ "Pricing Model: 0.5% Processing Fee "
#~ "(https://www.coinpayments.net/help-fees)"
#~ msgstr ""

#~ msgid "Documentation: https://www.coinpayments.net/apidoc"
#~ msgstr ""

#~ msgid "SDK Resources"
#~ msgstr ""

#~ msgid ""
#~ "SDKs (Software Development Kits) are "
#~ "used to accelerate the design and "
#~ "development of a product for the "
#~ "Dash Network. These resources can either"
#~ " be used to interface with an "
#~ "API provider or for the creation "
#~ "of standalone applications by forming "
#~ "transactions and/or performing various wallet"
#~ " functions."
#~ msgstr ""

#~ msgid "Dash Developer Guide"
#~ msgstr ""

#~ msgid "https://dashcore.readme.io/"
#~ msgstr ""

#~ msgid ""
#~ "The Dash Developer Portal aims to "
#~ "provide the information you need to "
#~ "understand Dash and start building "
#~ "Dash-based applications. To make the "
#~ "best use of this documentation, you "
#~ "may want to install the current "
#~ "version of Dash Core and Dash "
#~ "Platform, either from source, from a "
#~ "pre-compiled executable or from Docker"
#~ " Hub."
#~ msgstr ""

#~ msgid "Dash Core: https://dashcore.readme.io/"
#~ msgstr ""

#~ msgid "Dash Platform: https://dashplatform.readme.io/"
#~ msgstr ""

#~ msgid "NodeJS/JavaScript: Dashcore"
#~ msgstr ""

#~ msgid "https://bitcore.io"
#~ msgstr ""

#~ msgid ""
#~ "Dashcore is a fork of Bitcore and"
#~ " operates as a full Dash node —"
#~ " your apps run directly on the "
#~ "peer-to-peer network. For wallet "
#~ "application development, additional indexes "
#~ "have been added into Dash for "
#~ "querying address balances, transaction "
#~ "history, and unspent outputs."
#~ msgstr ""

#~ msgid "Platform: NodeJS / Javascript"
#~ msgstr ""

#~ msgid ""
#~ "Documentation: https://github.com/dashevo/dashcore-"
#~ "lib/blob/master/README.md#documentation"
#~ msgstr ""

#~ msgid "Repository lib: https://github.com/dashevo/dashcore-lib"
#~ msgstr ""

#~ msgid "Repository node: https://github.com/dashevo/dashcore-node"
#~ msgstr ""

#~ msgid "See also: `Insight API <https://github.com/dashevo/insight-api>`__"
#~ msgstr ""

#~ msgid "NodeJS/JavaScript: DashJS"
#~ msgstr ""

#~ msgid ""
#~ "DashJS allows you to transact on "
#~ "L1 or fetch/register documents on L2 "
#~ "within a single library, including "
#~ "management and signing of your "
#~ "documents."
#~ msgstr ""

#~ msgid "Documentation: https://dashevo.github.io/js-dash-sdk/"
#~ msgstr ""

#~ msgid "Repository: https://github.com/dashevo/js-dash-sdk"
#~ msgstr ""

#~ msgid "PHP: Bitcoin-PHP"
#~ msgstr ""

#~ msgid "https://github.com/Bit-Wasp/bitcoin-php"
#~ msgstr ""

#~ msgid ""
#~ "Bitcoin-PHP is an implementation of "
#~ "Bitcoin with support for Dash using "
#~ "mostly pure PHP."
#~ msgstr ""

#~ msgid "Platform: PHP"
#~ msgstr ""

#~ msgid ""
#~ "Documentation: https://github.com/Bit-Wasp/bitcoin-"
#~ "php/blob/1.0/doc/documentation/Introduction.md"
#~ msgstr ""

#~ msgid "Repository: https://github.com/snogcel/bitcoin-php"
#~ msgstr ""

#~ msgid "Python: PyCoin"
#~ msgstr ""

#~ msgid "https://github.com/richardkiss/pycoin"
#~ msgstr ""

#~ msgid ""
#~ "PyCoin is an implementation of a "
#~ "bunch of utility routines that may "
#~ "be useful when dealing with Bitcoin "
#~ "and Dash. It has been tested with"
#~ " Python 2.7, 3.6 and 3.7."
#~ msgstr ""

#~ msgid "Platform: Python"
#~ msgstr ""

#~ msgid "Documentation: https://pycoin.readthedocs.io/en/latest/"
#~ msgstr ""

#~ msgid "Repository: https://github.com/richardkiss/pycoin"
#~ msgstr ""

#~ msgid ""
#~ "See also: `JSON-RPC Utilities "
#~ "<https://github.com/DeltaEngine/python-dashrpc>`__"
#~ msgstr ""

#~ msgid "Java: DashJ"
#~ msgstr ""

#~ msgid "https://github.com/dashevo/dashj"
#~ msgstr ""

#~ msgid ""
#~ "DashJ is a library for working "
#~ "with the Dash protocol. It can "
#~ "maintain a wallet, send/receive transactions"
#~ " (including InstantSend) without needing a"
#~ " local copy of Dash Core, and "
#~ "has many other advanced features. It's"
#~ " implemented in Java but can be "
#~ "used from any JVM compatible language:"
#~ " examples in Python and JavaScript "
#~ "are included."
#~ msgstr ""

#~ msgid "Platform: Java"
#~ msgstr ""

#~ msgid "Documentation: https://bitcoinj.org/getting-started"
#~ msgstr ""

#~ msgid "Repository: https://github.com/dashevo/dashj"
#~ msgstr ""

#~ msgid "Example application: https://github.com/tomasz-ludek/pocket-of-dash"
#~ msgstr ""

#~ msgid "Objective-C: Dash-Sync"
#~ msgstr ""

#~ msgid "https://github.com/dashevo/dashsync-iOS"
#~ msgstr ""

#~ msgid ""
#~ "Dash-Sync is an Objective-C Dash "
#~ "blockchain framework for iOS. It "
#~ "implements all most relevant Bitcoin "
#~ "Improvement Proposals (BIPs) and Dash "
#~ "Improvement Proposals (DIPs)."
#~ msgstr ""

#~ msgid "Platform: iOS"
#~ msgstr ""

#~ msgid "Repository: https://github.com/dashevo/dashsync-iOS"
#~ msgstr ""

#~ msgid ".NET: NBitcoin"
#~ msgstr ""

#~ msgid "https://github.com/MetacoSA/NBitcoin"
#~ msgstr ""

#~ msgid ""
#~ "NBitcoin is the most complete Bitcoin"
#~ " library for the .NET platform and"
#~ " has been patched to include support"
#~ " for Dash. It implements all most "
#~ "relevant Bitcoin Improvement Proposals (BIPs)"
#~ " and Dash Improvement Proposals (DIPs). "
#~ "It also provides low level access "
#~ "to Dash primitives so you can "
#~ "easily build your application on top "
#~ "of it."
#~ msgstr ""

#~ msgid "Platform: .NET"
#~ msgstr ""

#~ msgid ""
#~ "Documentation: "
#~ "https://programmingblockchain.gitbook.io/programmingblockchain/"
#~ msgstr ""

#~ msgid "Repository: https://github.com/MetacoSA/NBitcoin"
#~ msgstr ""

#~ msgid ""
#~ "See also: `JSON-RPC Utilities "
#~ "<https://github.com/cryptean/bitcoinlib>`__"
#~ msgstr ""

#~ msgid "BlockCypher also offers client SDKs."
#~ msgstr ""

#~ msgid "Platform: Ruby, Python, Java, PHP, Go, NodeJS"
#~ msgstr ""

#~ msgid ""
#~ "Repositories: https://www.blockcypher.com/dev/dash"
#~ "/#blockcypher-supported-language-sdks"
#~ msgstr ""

#~ msgid "Vending Machines"
#~ msgstr ""

#~ msgid ""
#~ "Community member moocowmoo has released "
#~ "code to help merchants build their "
#~ "own vending machine and set it up"
#~ " to receive Dash InstantSend payments. "
#~ "The Dashvend software can also be "
#~ "used to create any sort of payment"
#~ " system, including point-of-sale "
#~ "systems that can accept InstantSend "
#~ "payments."
#~ msgstr ""

#~ msgid "`Open Source Code <https://github.com/moocowmoo/dashvend>`_"
#~ msgstr ""

#~ msgid "`Demonstration video <https://www.youtube.com/watch?v=SX-3kwbam0o>`_"
#~ msgstr ""

#~ msgid "Price Tickers"
#~ msgstr ""

#~ msgid ""
#~ "You can add a simple price ticker"
#~ " widget to your website using the "
#~ "simple `code snippet generator from "
#~ "CoinGecko "
#~ "<https://www.coingecko.com/en/widgets/coin_ticker_widget>`_."
#~ msgstr ""

#~ msgid ""
#~ "Similar widgets with different designs "
#~ "are available from `CoinLib "
#~ "<https://coinlib.io/widgets>`_, `WorldCoinIndex "
#~ "<https://www.worldcoinindex.com/Widget>`_ and `Cryptonator"
#~ " <https://www.cryptonator.com/widget>`_, while an "
#~ "API providing similar information is "
#~ "available from `DashCentral "
#~ "<https://www.dashcentral.org/about/api>`_."
#~ msgstr ""

#~ msgid "QR Codes"
#~ msgstr ""

#~ msgid ""
#~ "Many wallets can generate QR codes "
#~ "that are scannable to simplify entry "
#~ "of the Dash address. Printing these "
#~ "codes or posting the on your "
#~ "website makes it easy to receive "
#~ "payment and tips in Dash, both "
#~ "online and offline."
#~ msgstr ""

#~ msgid ""
#~ "In Dash Core, go to the "
#~ "**Receive** tab, generate an address if"
#~ " necessary, and double-click it to"
#~ " display a QR code. Right-click "
#~ "on the QR code and select **Save"
#~ " Image** to save a PNG file."
#~ msgstr ""

#~ msgid ""
#~ "In Dash for Android, tap **Request "
#~ "Coins** and then tap the QR code"
#~ " to display a larger image. You "
#~ "can screenshot this to save an "
#~ "image."
#~ msgstr ""

#~ msgid ""
#~ "In Dash for iOS, swipe to the "
#~ "left to display the **Receive Dash** "
#~ "screen. A QR code and address will"
#~ " appear. You can screenshot this to"
#~ " save an image."
#~ msgstr ""

#~ msgid ""
#~ "To generate a QR code from any "
#~ "Dash address, visit `CWA QR Code "
#~ "Generator <https://cwaqrgen.com/dash>`_ and simply"
#~ " paste your Dash address to generate"
#~ " an image."
#~ msgstr ""

#~ msgid ""
#~ "Whenever a transaction enters the "
#~ "mempool and whenever a transaction is"
#~ " locked in the mempool, ZMQ "
#~ "notifications can be broadcast by the"
#~ " node. A list of possible ZMQ "
#~ "notifications can be found `here "
#~ "<https://github.com/dashpay/dash/blob/master/doc/zmq.md#usage>`__."
#~ msgstr ""

#~ msgid ""
#~ "InstantSend Status is typically determined "
#~ "through direct connection with the dash"
#~ " daemon, `ZMQ notification "
#~ "<https://github.com/dashpay/dash/blob/master/doc/instantsend.md#zmq>`__,"
#~ " or through the usage of an "
#~ "external wallet notification script."
#~ msgstr ""

#~ msgid ""
#~ "ChainLock status is typically determined "
#~ "through direct connection with the Dash"
#~ " daemon or by a `ZMQ notification "
#~ "<https://github.com/dashpay/dash/blob/master/doc/zmq.md#usage>`__."
#~ msgstr ""

